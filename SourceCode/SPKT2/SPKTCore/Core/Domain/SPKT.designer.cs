#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPKTCore.Core.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SPKT")]
	public partial class SPKTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountPermission(AccountPermission instance);
    partial void UpdateAccountPermission(AccountPermission instance);
    partial void DeleteAccountPermission(AccountPermission instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertPrivacyFlag(PrivacyFlag instance);
    partial void UpdatePrivacyFlag(PrivacyFlag instance);
    partial void DeletePrivacyFlag(PrivacyFlag instance);
    partial void InsertProfileAttributeType(ProfileAttributeType instance);
    partial void UpdateProfileAttributeType(ProfileAttributeType instance);
    partial void DeleteProfileAttributeType(ProfileAttributeType instance);
    partial void InsertStatusUpdate(StatusUpdate instance);
    partial void UpdateStatusUpdate(StatusUpdate instance);
    partial void DeleteStatusUpdate(StatusUpdate instance);
    partial void InsertVisibilityLevel(VisibilityLevel instance);
    partial void UpdateVisibilityLevel(VisibilityLevel instance);
    partial void DeleteVisibilityLevel(VisibilityLevel instance);
    partial void InsertAlertType(AlertType instance);
    partial void UpdateAlertType(AlertType instance);
    partial void DeleteAlertType(AlertType instance);
    partial void InsertLevelOfExperience(LevelOfExperience instance);
    partial void UpdateLevelOfExperience(LevelOfExperience instance);
    partial void DeleteLevelOfExperience(LevelOfExperience instance);
    partial void InsertProfileAttribute(ProfileAttribute instance);
    partial void UpdateProfileAttribute(ProfileAttribute instance);
    partial void DeleteProfileAttribute(ProfileAttribute instance);
    partial void InsertAlert(Alert instance);
    partial void UpdateAlert(Alert instance);
    partial void DeleteAlert(Alert instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertProfileAttributeName(ProfileAttributeName instance);
    partial void UpdateProfileAttributeName(ProfileAttributeName instance);
    partial void DeleteProfileAttributeName(ProfileAttributeName instance);
    #endregion
		
		public SPKTDataContext() : 
				base(global::SPKTCore.Properties.Settings.Default.SPKTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SPKTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPKTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPKTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPKTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountPermission> AccountPermissions
		{
			get
			{
				return this.GetTable<AccountPermission>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<PrivacyFlag> PrivacyFlags
		{
			get
			{
				return this.GetTable<PrivacyFlag>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAttributeType> ProfileAttributeTypes
		{
			get
			{
				return this.GetTable<ProfileAttributeType>();
			}
		}
		
		public System.Data.Linq.Table<StatusUpdate> StatusUpdates
		{
			get
			{
				return this.GetTable<StatusUpdate>();
			}
		}
		
		public System.Data.Linq.Table<VisibilityLevel> VisibilityLevels
		{
			get
			{
				return this.GetTable<VisibilityLevel>();
			}
		}
		
		public System.Data.Linq.Table<AlertType> AlertTypes
		{
			get
			{
				return this.GetTable<AlertType>();
			}
		}
		
		public System.Data.Linq.Table<LevelOfExperience> LevelOfExperiences
		{
			get
			{
				return this.GetTable<LevelOfExperience>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAttribute> ProfileAttributes
		{
			get
			{
				return this.GetTable<ProfileAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Alert> Alerts
		{
			get
			{
				return this.GetTable<Alert>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAttributeName> ProfileAttributeNames
		{
			get
			{
				return this.GetTable<ProfileAttributeName>();
			}
		}
		
		public System.Data.Linq.Table<ParameterInt> ParameterInts
		{
			get
			{
				return this.GetTable<ParameterInt>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountPermission")]
	public partial class AccountPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApID;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<int> _PermissionID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApIDChanging(int value);
    partial void OnApIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnPermissionIDChanging(System.Nullable<int> value);
    partial void OnPermissionIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public AccountPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ApID
		{
			get
			{
				return this._ApID;
			}
			set
			{
				if ((this._ApID != value))
				{
					this.OnApIDChanging(value);
					this.SendPropertyChanging();
					this._ApID = value;
					this.SendPropertyChanged("ApID");
					this.OnApIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_AccountPermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.AccountPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.AccountPermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountPermission", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountPermissions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountPermissions.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<AccountPermission> _AccountPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public Permission()
		{
			this._AccountPermissions = new EntitySet<AccountPermission>(new Action<AccountPermission>(this.attach_AccountPermissions), new Action<AccountPermission>(this.detach_AccountPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_AccountPermission", Storage="_AccountPermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<AccountPermission> AccountPermissions
		{
			get
			{
				return this._AccountPermissions;
			}
			set
			{
				this._AccountPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _EmailVerified;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private string _DisplayName;
		
		private EntitySet<AccountPermission> _AccountPermissions;
		
		private EntitySet<StatusUpdate> _StatusUpdates;
		
		private EntitySet<Alert> _Alerts;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailVerifiedChanging(bool value);
    partial void OnEmailVerifiedChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public Account()
		{
			this._AccountPermissions = new EntitySet<AccountPermission>(new Action<AccountPermission>(this.attach_AccountPermissions), new Action<AccountPermission>(this.detach_AccountPermissions));
			this._StatusUpdates = new EntitySet<StatusUpdate>(new Action<StatusUpdate>(this.attach_StatusUpdates), new Action<StatusUpdate>(this.detach_StatusUpdates));
			this._Alerts = new EntitySet<Alert>(new Action<Alert>(this.attach_Alerts), new Action<Alert>(this.detach_Alerts));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailVerified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EmailVerified
		{
			get
			{
				return this._EmailVerified;
			}
			set
			{
				if ((this._EmailVerified != value))
				{
					this.OnEmailVerifiedChanging(value);
					this.SendPropertyChanging();
					this._EmailVerified = value;
					this.SendPropertyChanged("EmailVerified");
					this.OnEmailVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountPermission", Storage="_AccountPermissions", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<AccountPermission> AccountPermissions
		{
			get
			{
				return this._AccountPermissions;
			}
			set
			{
				this._AccountPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_StatusUpdate", Storage="_StatusUpdates", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<StatusUpdate> StatusUpdates
		{
			get
			{
				return this._StatusUpdates;
			}
			set
			{
				this._StatusUpdates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Alert", Storage="_Alerts", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Alert> Alerts
		{
			get
			{
				return this._Alerts;
			}
			set
			{
				this._Alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Profile", Storage="_Profiles", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_StatusUpdates(StatusUpdate entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_StatusUpdates(StatusUpdate entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrivacyFlag")]
	public partial class PrivacyFlag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrivacyFlagID;
		
		private int _ProfileID;
		
		private int _ProfileAttributeTypeID;
		
		private int _VisibilityLevelID;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<ProfileAttributeType> _ProfileAttributeType;
		
		private EntityRef<VisibilityLevel> _VisibilityLevel;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivacyFlagIDChanging(int value);
    partial void OnPrivacyFlagIDChanged();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnVisibilityLevelIDChanging(int value);
    partial void OnVisibilityLevelIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public PrivacyFlag()
		{
			this._ProfileAttributeType = default(EntityRef<ProfileAttributeType>);
			this._VisibilityLevel = default(EntityRef<VisibilityLevel>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivacyFlagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PrivacyFlagID
		{
			get
			{
				return this._PrivacyFlagID;
			}
			set
			{
				if ((this._PrivacyFlagID != value))
				{
					this.OnPrivacyFlagIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyFlagID = value;
					this.SendPropertyChanged("PrivacyFlagID");
					this.OnPrivacyFlagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					if (this._ProfileAttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisibilityLevelID
		{
			get
			{
				return this._VisibilityLevelID;
			}
			set
			{
				if ((this._VisibilityLevelID != value))
				{
					if (this._VisibilityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisibilityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelID = value;
					this.SendPropertyChanged("VisibilityLevelID");
					this.OnVisibilityLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_PrivacyFlag", Storage="_ProfileAttributeType", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID", IsForeignKey=true)]
		public ProfileAttributeType ProfileAttributeType
		{
			get
			{
				return this._ProfileAttributeType.Entity;
			}
			set
			{
				ProfileAttributeType previousValue = this._ProfileAttributeType.Entity;
				if (((previousValue != value) 
							|| (this._ProfileAttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfileAttributeType.Entity = null;
						previousValue.PrivacyFlags.Remove(this);
					}
					this._ProfileAttributeType.Entity = value;
					if ((value != null))
					{
						value.PrivacyFlags.Add(this);
						this._ProfileAttributeTypeID = value.ProfileAttributeTypeID;
					}
					else
					{
						this._ProfileAttributeTypeID = default(int);
					}
					this.SendPropertyChanged("ProfileAttributeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisibilityLevel_PrivacyFlag", Storage="_VisibilityLevel", ThisKey="VisibilityLevelID", OtherKey="VisibilityLevelID", IsForeignKey=true)]
		public VisibilityLevel VisibilityLevel
		{
			get
			{
				return this._VisibilityLevel.Entity;
			}
			set
			{
				VisibilityLevel previousValue = this._VisibilityLevel.Entity;
				if (((previousValue != value) 
							|| (this._VisibilityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisibilityLevel.Entity = null;
						previousValue.PrivacyFlags.Remove(this);
					}
					this._VisibilityLevel.Entity = value;
					if ((value != null))
					{
						value.PrivacyFlags.Add(this);
						this._VisibilityLevelID = value.VisibilityLevelID;
					}
					else
					{
						this._VisibilityLevelID = default(int);
					}
					this.SendPropertyChanged("VisibilityLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_PrivacyFlag", Storage="_Profile", ThisKey="ProfileID", OtherKey="ProfileID", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.PrivacyFlags.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.PrivacyFlags.Add(this);
						this._ProfileID = value.ProfileID;
					}
					else
					{
						this._ProfileID = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileAttributeType")]
	public partial class ProfileAttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeTypeID;
		
		private string _Type;
		
		private int _SortOrder;
		
		private EntitySet<PrivacyFlag> _PrivacyFlags;
		
		private EntitySet<ProfileAttribute> _ProfileAttributes;
		
		private EntitySet<ProfileAttributeName> _ProfileAttributeNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public ProfileAttributeType()
		{
			this._PrivacyFlags = new EntitySet<PrivacyFlag>(new Action<PrivacyFlag>(this.attach_PrivacyFlags), new Action<PrivacyFlag>(this.detach_PrivacyFlags));
			this._ProfileAttributes = new EntitySet<ProfileAttribute>(new Action<ProfileAttribute>(this.attach_ProfileAttributes), new Action<ProfileAttribute>(this.detach_ProfileAttributes));
			this._ProfileAttributeNames = new EntitySet<ProfileAttributeName>(new Action<ProfileAttributeName>(this.attach_ProfileAttributeNames), new Action<ProfileAttributeName>(this.detach_ProfileAttributeNames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_PrivacyFlag", Storage="_PrivacyFlags", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID")]
		public EntitySet<PrivacyFlag> PrivacyFlags
		{
			get
			{
				return this._PrivacyFlags;
			}
			set
			{
				this._PrivacyFlags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_ProfileAttribute", Storage="_ProfileAttributes", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID")]
		public EntitySet<ProfileAttribute> ProfileAttributes
		{
			get
			{
				return this._ProfileAttributes;
			}
			set
			{
				this._ProfileAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_ProfileAttributeName", Storage="_ProfileAttributeNames", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID")]
		public EntitySet<ProfileAttributeName> ProfileAttributeNames
		{
			get
			{
				return this._ProfileAttributeNames;
			}
			set
			{
				this._ProfileAttributeNames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = this;
		}
		
		private void detach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = null;
		}
		
		private void attach_ProfileAttributes(ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = this;
		}
		
		private void detach_ProfileAttributes(ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = null;
		}
		
		private void attach_ProfileAttributeNames(ProfileAttributeName entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = this;
		}
		
		private void detach_ProfileAttributeNames(ProfileAttributeName entity)
		{
			this.SendPropertyChanging();
			entity.ProfileAttributeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusUpdate")]
	public partial class StatusUpdate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StatusUpdateID;
		
		private System.Nullable<int> _AccountID;
		
		private string _Status;
		
		private System.Nullable<int> _VisibilityLevelID;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<VisibilityLevel> _VisibilityLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusUpdateIDChanging(long value);
    partial void OnStatusUpdateIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnVisibilityLevelIDChanging(System.Nullable<int> value);
    partial void OnVisibilityLevelIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StatusUpdate()
		{
			this._Account = default(EntityRef<Account>);
			this._VisibilityLevel = default(EntityRef<VisibilityLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusUpdateID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long StatusUpdateID
		{
			get
			{
				return this._StatusUpdateID;
			}
			set
			{
				if ((this._StatusUpdateID != value))
				{
					this.OnStatusUpdateIDChanging(value);
					this.SendPropertyChanging();
					this._StatusUpdateID = value;
					this.SendPropertyChanged("StatusUpdateID");
					this.OnStatusUpdateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> VisibilityLevelID
		{
			get
			{
				return this._VisibilityLevelID;
			}
			set
			{
				if ((this._VisibilityLevelID != value))
				{
					if (this._VisibilityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisibilityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelID = value;
					this.SendPropertyChanged("VisibilityLevelID");
					this.OnVisibilityLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_StatusUpdate", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.StatusUpdates.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.StatusUpdates.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisibilityLevel_StatusUpdate", Storage="_VisibilityLevel", ThisKey="VisibilityLevelID", OtherKey="VisibilityLevelID", IsForeignKey=true)]
		public VisibilityLevel VisibilityLevel
		{
			get
			{
				return this._VisibilityLevel.Entity;
			}
			set
			{
				VisibilityLevel previousValue = this._VisibilityLevel.Entity;
				if (((previousValue != value) 
							|| (this._VisibilityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisibilityLevel.Entity = null;
						previousValue.StatusUpdates.Remove(this);
					}
					this._VisibilityLevel.Entity = value;
					if ((value != null))
					{
						value.StatusUpdates.Add(this);
						this._VisibilityLevelID = value.VisibilityLevelID;
					}
					else
					{
						this._VisibilityLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VisibilityLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisibilityLevel")]
	public partial class VisibilityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisibilityLevelID;
		
		private string _Name;
		
		private EntitySet<PrivacyFlag> _PrivacyFlags;
		
		private EntitySet<StatusUpdate> _StatusUpdates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisibilityLevelIDChanging(int value);
    partial void OnVisibilityLevelIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VisibilityLevel()
		{
			this._PrivacyFlags = new EntitySet<PrivacyFlag>(new Action<PrivacyFlag>(this.attach_PrivacyFlags), new Action<PrivacyFlag>(this.detach_PrivacyFlags));
			this._StatusUpdates = new EntitySet<StatusUpdate>(new Action<StatusUpdate>(this.attach_StatusUpdates), new Action<StatusUpdate>(this.detach_StatusUpdates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisibilityLevelID
		{
			get
			{
				return this._VisibilityLevelID;
			}
			set
			{
				if ((this._VisibilityLevelID != value))
				{
					this.OnVisibilityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelID = value;
					this.SendPropertyChanged("VisibilityLevelID");
					this.OnVisibilityLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisibilityLevel_PrivacyFlag", Storage="_PrivacyFlags", ThisKey="VisibilityLevelID", OtherKey="VisibilityLevelID")]
		public EntitySet<PrivacyFlag> PrivacyFlags
		{
			get
			{
				return this._PrivacyFlags;
			}
			set
			{
				this._PrivacyFlags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisibilityLevel_StatusUpdate", Storage="_StatusUpdates", ThisKey="VisibilityLevelID", OtherKey="VisibilityLevelID")]
		public EntitySet<StatusUpdate> StatusUpdates
		{
			get
			{
				return this._StatusUpdates;
			}
			set
			{
				this._StatusUpdates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.VisibilityLevel = this;
		}
		
		private void detach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.VisibilityLevel = null;
		}
		
		private void attach_StatusUpdates(StatusUpdate entity)
		{
			this.SendPropertyChanging();
			entity.VisibilityLevel = this;
		}
		
		private void detach_StatusUpdates(StatusUpdate entity)
		{
			this.SendPropertyChanging();
			entity.VisibilityLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlertType")]
	public partial class AlertType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertTypeID;
		
		private string _AlertTypeName;
		
		private EntitySet<Alert> _Alerts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertTypeIDChanging(int value);
    partial void OnAlertTypeIDChanged();
    partial void OnAlertTypeNameChanging(string value);
    partial void OnAlertTypeNameChanged();
    #endregion
		
		public AlertType()
		{
			this._Alerts = new EntitySet<Alert>(new Action<Alert>(this.attach_Alerts), new Action<Alert>(this.detach_Alerts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlertTypeID
		{
			get
			{
				return this._AlertTypeID;
			}
			set
			{
				if ((this._AlertTypeID != value))
				{
					this.OnAlertTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeID = value;
					this.SendPropertyChanged("AlertTypeID");
					this.OnAlertTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertTypeName", DbType="VarChar(500)")]
		public string AlertTypeName
		{
			get
			{
				return this._AlertTypeName;
			}
			set
			{
				if ((this._AlertTypeName != value))
				{
					this.OnAlertTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeName = value;
					this.SendPropertyChanged("AlertTypeName");
					this.OnAlertTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlertType_Alert", Storage="_Alerts", ThisKey="AlertTypeID", OtherKey="AlertTypeID")]
		public EntitySet<Alert> Alerts
		{
			get
			{
				return this._Alerts;
			}
			set
			{
				this._Alerts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.AlertType = this;
		}
		
		private void detach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.AlertType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevelOfExperience")]
	public partial class LevelOfExperience : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelOfExperienceID;
		
		private string _LevelOfExperienceName;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private System.Nullable<byte> _SortOrder;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelOfExperienceIDChanging(int value);
    partial void OnLevelOfExperienceIDChanged();
    partial void OnLevelOfExperienceNameChanging(string value);
    partial void OnLevelOfExperienceNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnSortOrderChanging(System.Nullable<byte> value);
    partial void OnSortOrderChanged();
    #endregion
		
		public LevelOfExperience()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfExperienceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int LevelOfExperienceID
		{
			get
			{
				return this._LevelOfExperienceID;
			}
			set
			{
				if ((this._LevelOfExperienceID != value))
				{
					this.OnLevelOfExperienceIDChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperienceID = value;
					this.SendPropertyChanged("LevelOfExperienceID");
					this.OnLevelOfExperienceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfExperienceName", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string LevelOfExperienceName
		{
			get
			{
				return this._LevelOfExperienceName;
			}
			set
			{
				if ((this._LevelOfExperienceName != value))
				{
					this.OnLevelOfExperienceNameChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperienceName = value;
					this.SendPropertyChanged("LevelOfExperienceName");
					this.OnLevelOfExperienceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelOfExperience_Profile", Storage="_Profiles", ThisKey="LevelOfExperienceID", OtherKey="LevelOfExperienceID")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.LevelOfExperience = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.LevelOfExperience = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileAttribute")]
	public partial class ProfileAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeID;
		
		private string _ProfileAttributeName;
		
		private int _ProfileID;
		
		private int _ProfileAttributeTypeID;
		
		private string _Response;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<ProfileAttributeType> _ProfileAttributeType;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeIDChanging(int value);
    partial void OnProfileAttributeIDChanged();
    partial void OnProfileAttributeNameChanging(string value);
    partial void OnProfileAttributeNameChanged();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public ProfileAttribute()
		{
			this._ProfileAttributeType = default(EntityRef<ProfileAttributeType>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeID
		{
			get
			{
				return this._ProfileAttributeID;
			}
			set
			{
				if ((this._ProfileAttributeID != value))
				{
					this.OnProfileAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeID = value;
					this.SendPropertyChanged("ProfileAttributeID");
					this.OnProfileAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProfileAttributeName
		{
			get
			{
				return this._ProfileAttributeName;
			}
			set
			{
				if ((this._ProfileAttributeName != value))
				{
					this.OnProfileAttributeNameChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeName = value;
					this.SendPropertyChanged("ProfileAttributeName");
					this.OnProfileAttributeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					if (this._ProfileAttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="NVarChar(2000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_ProfileAttribute", Storage="_ProfileAttributeType", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID", IsForeignKey=true)]
		public ProfileAttributeType ProfileAttributeType
		{
			get
			{
				return this._ProfileAttributeType.Entity;
			}
			set
			{
				ProfileAttributeType previousValue = this._ProfileAttributeType.Entity;
				if (((previousValue != value) 
							|| (this._ProfileAttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfileAttributeType.Entity = null;
						previousValue.ProfileAttributes.Remove(this);
					}
					this._ProfileAttributeType.Entity = value;
					if ((value != null))
					{
						value.ProfileAttributes.Add(this);
						this._ProfileAttributeTypeID = value.ProfileAttributeTypeID;
					}
					else
					{
						this._ProfileAttributeTypeID = default(int);
					}
					this.SendPropertyChanged("ProfileAttributeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_ProfileAttribute", Storage="_Profile", ThisKey="ProfileID", OtherKey="ProfileID", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.ProfileAttributes.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.ProfileAttributes.Add(this);
						this._ProfileID = value.ProfileID;
					}
					else
					{
						this._ProfileID = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alert")]
	public partial class Alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertID;
		
		private int _AccountID;
		
		private int _AlertTypeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _IsHidden;
		
		private string _Message;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<AlertType> _AlertType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertIDChanging(int value);
    partial void OnAlertIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnAlertTypeIDChanging(int value);
    partial void OnAlertTypeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnIsHiddenChanging(int value);
    partial void OnIsHiddenChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Alert()
		{
			this._Account = default(EntityRef<Account>);
			this._AlertType = default(EntityRef<AlertType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AlertID
		{
			get
			{
				return this._AlertID;
			}
			set
			{
				if ((this._AlertID != value))
				{
					this.OnAlertIDChanging(value);
					this.SendPropertyChanging();
					this._AlertID = value;
					this.SendPropertyChanged("AlertID");
					this.OnAlertIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AlertTypeID
		{
			get
			{
				return this._AlertTypeID;
			}
			set
			{
				if ((this._AlertTypeID != value))
				{
					if (this._AlertType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlertTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeID = value;
					this.SendPropertyChanged("AlertTypeID");
					this.OnAlertTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Alert", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Alerts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Alerts.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlertType_Alert", Storage="_AlertType", ThisKey="AlertTypeID", OtherKey="AlertTypeID", IsForeignKey=true)]
		public AlertType AlertType
		{
			get
			{
				return this._AlertType.Entity;
			}
			set
			{
				AlertType previousValue = this._AlertType.Entity;
				if (((previousValue != value) 
							|| (this._AlertType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlertType.Entity = null;
						previousValue.Alerts.Remove(this);
					}
					this._AlertType.Entity = value;
					if ((value != null))
					{
						value.Alerts.Add(this);
						this._AlertTypeID = value.AlertTypeID;
					}
					else
					{
						this._AlertTypeID = default(int);
					}
					this.SendPropertyChanged("AlertType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileID;
		
		private string _profileName;
		
		private int _AccountID;
		
		private string _FullName;
		
		private string _Sex;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Signature;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Nullable<int> _UseGrAvatar;
		
		private System.Nullable<int> _LevelOfExperienceID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private System.Data.Linq.Binary _Avatar;
		
		private string _AvatarMimeType;
		
		private EntitySet<PrivacyFlag> _PrivacyFlags;
		
		private EntitySet<ProfileAttribute> _ProfileAttributes;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<LevelOfExperience> _LevelOfExperience;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnprofileNameChanging(string value);
    partial void OnprofileNameChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnSignatureChanging(string value);
    partial void OnSignatureChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnUseGrAvatarChanging(System.Nullable<int> value);
    partial void OnUseGrAvatarChanged();
    partial void OnLevelOfExperienceIDChanging(System.Nullable<int> value);
    partial void OnLevelOfExperienceIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnAvatarMimeTypeChanging(string value);
    partial void OnAvatarMimeTypeChanged();
    #endregion
		
		public Profile()
		{
			this._PrivacyFlags = new EntitySet<PrivacyFlag>(new Action<PrivacyFlag>(this.attach_PrivacyFlags), new Action<PrivacyFlag>(this.detach_PrivacyFlags));
			this._ProfileAttributes = new EntitySet<ProfileAttribute>(new Action<ProfileAttribute>(this.attach_ProfileAttributes), new Action<ProfileAttribute>(this.detach_ProfileAttributes));
			this._Account = default(EntityRef<Account>);
			this._LevelOfExperience = default(EntityRef<LevelOfExperience>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profileName", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string profileName
		{
			get
			{
				return this._profileName;
			}
			set
			{
				if ((this._profileName != value))
				{
					this.OnprofileNameChanging(value);
					this.SendPropertyChanging();
					this._profileName = value;
					this.SendPropertyChanged("profileName");
					this.OnprofileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseGrAvatar", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UseGrAvatar
		{
			get
			{
				return this._UseGrAvatar;
			}
			set
			{
				if ((this._UseGrAvatar != value))
				{
					this.OnUseGrAvatarChanging(value);
					this.SendPropertyChanging();
					this._UseGrAvatar = value;
					this.SendPropertyChanged("UseGrAvatar");
					this.OnUseGrAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfExperienceID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LevelOfExperienceID
		{
			get
			{
				return this._LevelOfExperienceID;
			}
			set
			{
				if ((this._LevelOfExperienceID != value))
				{
					if (this._LevelOfExperience.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelOfExperienceIDChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperienceID = value;
					this.SendPropertyChanged("LevelOfExperienceID");
					this.OnLevelOfExperienceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarMimeType", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string AvatarMimeType
		{
			get
			{
				return this._AvatarMimeType;
			}
			set
			{
				if ((this._AvatarMimeType != value))
				{
					this.OnAvatarMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._AvatarMimeType = value;
					this.SendPropertyChanged("AvatarMimeType");
					this.OnAvatarMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_PrivacyFlag", Storage="_PrivacyFlags", ThisKey="ProfileID", OtherKey="ProfileID")]
		public EntitySet<PrivacyFlag> PrivacyFlags
		{
			get
			{
				return this._PrivacyFlags;
			}
			set
			{
				this._PrivacyFlags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_ProfileAttribute", Storage="_ProfileAttributes", ThisKey="ProfileID", OtherKey="ProfileID")]
		public EntitySet<ProfileAttribute> ProfileAttributes
		{
			get
			{
				return this._ProfileAttributes;
			}
			set
			{
				this._ProfileAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Profile", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelOfExperience_Profile", Storage="_LevelOfExperience", ThisKey="LevelOfExperienceID", OtherKey="LevelOfExperienceID", IsForeignKey=true)]
		public LevelOfExperience LevelOfExperience
		{
			get
			{
				return this._LevelOfExperience.Entity;
			}
			set
			{
				LevelOfExperience previousValue = this._LevelOfExperience.Entity;
				if (((previousValue != value) 
							|| (this._LevelOfExperience.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelOfExperience.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._LevelOfExperience.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._LevelOfExperienceID = value.LevelOfExperienceID;
					}
					else
					{
						this._LevelOfExperienceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelOfExperience");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_PrivacyFlags(PrivacyFlag entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_ProfileAttributes(ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_ProfileAttributes(ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileAttributeName")]
	public partial class ProfileAttributeName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeNameID;
		
		private int _ProfileAttributeTypeID;
		
		private string _ProfileAttributeName1;
		
		private EntityRef<ProfileAttributeType> _ProfileAttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeNameIDChanging(int value);
    partial void OnProfileAttributeNameIDChanged();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnProfileAttributeName1Changing(string value);
    partial void OnProfileAttributeName1Changed();
    #endregion
		
		public ProfileAttributeName()
		{
			this._ProfileAttributeType = default(EntityRef<ProfileAttributeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeNameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProfileAttributeNameID
		{
			get
			{
				return this._ProfileAttributeNameID;
			}
			set
			{
				if ((this._ProfileAttributeNameID != value))
				{
					this.OnProfileAttributeNameIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeNameID = value;
					this.SendPropertyChanged("ProfileAttributeNameID");
					this.OnProfileAttributeNameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeTypeID", DbType="Int NOT NULL")]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					if (this._ProfileAttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProfileAttributeName", Storage="_ProfileAttributeName1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ProfileAttributeName1
		{
			get
			{
				return this._ProfileAttributeName1;
			}
			set
			{
				if ((this._ProfileAttributeName1 != value))
				{
					this.OnProfileAttributeName1Changing(value);
					this.SendPropertyChanging();
					this._ProfileAttributeName1 = value;
					this.SendPropertyChanged("ProfileAttributeName1");
					this.OnProfileAttributeName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileAttributeType_ProfileAttributeName", Storage="_ProfileAttributeType", ThisKey="ProfileAttributeTypeID", OtherKey="ProfileAttributeTypeID", IsForeignKey=true)]
		public ProfileAttributeType ProfileAttributeType
		{
			get
			{
				return this._ProfileAttributeType.Entity;
			}
			set
			{
				ProfileAttributeType previousValue = this._ProfileAttributeType.Entity;
				if (((previousValue != value) 
							|| (this._ProfileAttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfileAttributeType.Entity = null;
						previousValue.ProfileAttributeNames.Remove(this);
					}
					this._ProfileAttributeType.Entity = value;
					if ((value != null))
					{
						value.ProfileAttributeNames.Add(this);
						this._ProfileAttributeTypeID = value.ProfileAttributeTypeID;
					}
					else
					{
						this._ProfileAttributeTypeID = default(int);
					}
					this.SendPropertyChanged("ProfileAttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParameterInt")]
	public partial class ParameterInt
	{
		
		private string _ParameterName;
		
		private int _ParameterContent;
		
		public ParameterInt()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterName
		{
			get
			{
				return this._ParameterName;
			}
			set
			{
				if ((this._ParameterName != value))
				{
					this._ParameterName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterContent", DbType="Int NOT NULL")]
		public int ParameterContent
		{
			get
			{
				return this._ParameterContent;
			}
			set
			{
				if ((this._ParameterContent != value))
				{
					this._ParameterContent = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
